
{"image_id": "000000000505.png", "cam_R": [-0.020562173125731432, 0.2794974864001853, -0.9599262222339411, -0.2867816504970582, 0.9181336375387414, 0.2734719520500444, 0.9577752773874102, 0.28091240399074024, 0.06127592765199506], "cam_t": [-0.017078070918998402, -0.010527134900200021, -0.007981005160789837], "keypoints": [356.6665954589844, 346.5239562988281, 0.5348382592201233, 325.99072265625, 328.80010986328125, 0.3476462662220001, 316.4471130371094, 330.8451843261719, 0.3724716305732727, 342.3511962890625, 358.1126403808594, 0.540917694568634, 327.3540954589844, 313.8030090332031, 0.2674335837364197, 324.6273498535156, 314.4847106933594, 0.1362803876399994, 336.897705078125, 330.1634826660156, 0.43371087312698364, 326.6723937988281, 306.98614501953125, 0.3798801004886627, 347.12298583984375, 326.0733642578125, 0.3609640896320343, 314.40203857421875, 328.1184387207031, 0.20375262200832367, 327.3540954589844, 324.7099914550781, 0.296578586101532, 319.85552978515625, 311.7579650878906, 0.24372492730617523, 343.0328674316406, 342.433837890625, 0.5952706933021545, 324.6273498535156, 319.2565002441406, 0.20303519070148468, 312.35699462890625, 323.34661865234375, 0.5256595611572266, 342.3511962890625, 336.9803466796875, 0.4091404974460602, 345.07794189453125, 327.4367370605469, 0.3950737416744232, 326.6723937988281, 349.9324035644531, 0.5842064023017883, 313.7203674316406, 342.433837890625, 0.5570520162582397, 320.5372314453125, 346.5239562988281, 0.6375207304954529, 343.0328674316406, 323.34661865234375, 0.3424954414367676, 338.2610778808594, 357.4309387207031, 0.6520153880119324, 334.8526306152344, 309.0312194824219, 0.35689711570739746, 333.4892578125, 355.3858947753906, 0.3025413155555725, 322.582275390625, 345.16058349609375, 0.49100348353385925, 341.66949462890625, 318.5748291015625, 0.2842615842819214, 325.99072265625, 315.1663818359375, 0.13710175454616547, 320.5372314453125, 313.121337890625, 0.1890731304883957, 341.66949462890625, 351.2957763671875, 0.49160897731781006, 310.3119201660156, 331.52685546875, 0.15331627428531647, 309.6302490234375, 330.1634826660156, 0.08808726817369461, 345.07794189453125, 317.2114562988281, 0.49146321415901184, 330.0808410644531, 312.43963623046875, 0.35589420795440674, 337.5793762207031, 309.712890625, 0.27272698283195496, 317.1287841796875, 334.25360107421875, 0.4705776870250702, 342.3511962890625, 330.1634826660156, 0.15915393829345703, 315.7654113769531, 316.5297546386719, 0.21818038821220398, 350.53143310546875, 324.7099914550781, 0.43579787015914917, 321.9006042480469, 310.39459228515625, 0.06732165813446045, 340.9878234863281, 308.3495178222656, 0.4420369565486908, 322.582275390625, 328.1184387207031, 0.3580075800418854, 336.897705078125, 307.6678466796875, 0.4637591242790222, 331.4442138671875, 311.7579650878906, 0.5483866333961487, 336.21600341796875, 336.9803466796875, 0.4006919264793396, 315.7654113769531, 315.1663818359375, 0.37947726249694824, 342.3511962890625, 323.34661865234375, 0.28386545181274414, 325.99072265625, 339.0254211425781, 0.15356943011283875, 343.7145690917969, 329.4818115234375, 0.26020532846450806, 323.9456481933594, 317.2114562988281, 0.273640900850296, 338.9427490234375, 358.7943115234375, 0.03114609606564045], "score": 2.164466619491577}

import glob, os
import shutil
import json
import numpy as np
import random
import cv2
from utils import *
from distutils.dir_util import copy_tree

def splitAndCastToFloat(line):
	line = line.split()
	line = line[0:3]
	return list(map(float, line))


def getBBOfPlyObject():
	with open("obj_01.ply") as f:
		content = f.readlines()
		content = [x.strip() for x in content] 
		
		skip = 0
		foundVertexEl = False
		foundEndOfHead = False
		lineVals = []
		linesToScan = 0

		while (not foundVertexEl or not foundEndOfHead):
			lineVals = content[skip].split()
			if (lineVals[0] == 'end_header'):
				foundEndOfHead = True
			if (lineVals[0] == 'element'):
				if (lineVals[1] == 'vertex'):
					linesToScan = int(lineVals[2])
					foundVertexEl = True
			skip+=1
		content = content[skip:linesToScan+skip]
		copy = [];
		for line in content: 
			copy.append(splitAndCastToFloat(line))
		vertices = np.matrix(np.array(copy))
		mins = vertices.min(0)
		maxs = vertices.max(0)
		minsMaxs = np.array([[mins.item(0),mins.item(1),mins.item(2)], [maxs.item(0),maxs.item(1),maxs.item(2)]]).T
		corners = np.array(np.meshgrid(minsMaxs[0,:], minsMaxs[1,:], minsMaxs[2,:])).T.reshape(-1,3)
		R_gt = np.array([[0.94137597, 0.31805399, -0.11248200, 11.03801096], [0.23415700, -0.85603601, -0.46083900, 124.58541745], [-0.24286000, 0.40748399, -0.88032699, 849.71766750]])
		R_p = np.array([[0.9406752291304329, 0.3258326502956354, -0.09467416385545607, 11.76421530495168], [0.270510546808252, -0.8885950780502103, -0.37043600166620033, 127.83885882665334], [-0.20482714020829385, 0.3228496109123609, -0.9240205470485108, 866.1953181788415]])
		t_gt = np.array([11.76421530495168, 127.83885882665334, 866.1953181788415])
		#Rt_gt        = np.concatenate((R_gt, t_gt), axis=1)
		i_c = np.array([[572.4114, 0. ,325.2611], [  0.   ,  573.5704, 242.0489], [  0. ,      0. ,      1.    ]])
		
		corners = np.c_[corners, np.ones((len(corners), 1))].transpose()
		print(corners)
		print(R_gt)
		print(i_c)
		proj_2d_gt   = compute_projection(corners, R_gt, i_c)
		proj_2d_gt = proj_2d_gt.astype(int)

		with open('res.json') as json_file:  
			data = json.load(json_file)
			R = np.array(data[0]['cam_R']).reshape(3,3)
			Rt = np.append(R, np.array([data[0]['cam_t']]).T, axis=1)
		proj_2d_p   = compute_projection(corners, Rt, i_c)
		proj_2d_p = proj_2d_p.astype(int)
		print(proj_2d_gt)
		print(proj_2d_p)
		# Make empty black image
		image=cv2.imread('000000000505.png',1)
		height, width, channels = image.shape
		red = [0,0,255]
		blue = [255,0,0]
		image[proj_2d_p[1,:],proj_2d_p[0,:]]=blue
		image[proj_2d_gt[1,:],proj_2d_gt[0,:]]=red

		# Draw lower base of 3d bb
		pts = np.array([[proj_2d_p[0,0], proj_2d_p[1,0]],[proj_2d_p[0,2], proj_2d_p[1,2]],[proj_2d_p[0,3], proj_2d_p[1,3]],[proj_2d_p[0,1], proj_2d_p[1,1]]], np.int32)
		cv2.polylines(image,[pts],True,(0,255,255))
		pts = np.array([[proj_2d_gt[0,0], proj_2d_gt[1,0]],[proj_2d_gt[0,2], proj_2d_gt[1,2]],[proj_2d_gt[0,3], proj_2d_gt[1,3]],[proj_2d_gt[0,1], proj_2d_gt[1,1]]], np.int32)
		cv2.polylines(image,[pts],True,(255,0,255))
		
		# Draw the front of the bounding box
		pts = np.array([[proj_2d_p[0,3], proj_2d_p[1,3]],[proj_2d_p[0,7], proj_2d_p[1,7]],[proj_2d_p[0,6], proj_2d_p[1,6]],[proj_2d_p[0,2], proj_2d_p[1,2]]], np.int32)
		cv2.polylines(image,[pts],True,(0,255,255))
		pts = np.array([[proj_2d_gt[0,3], proj_2d_gt[1,3]],[proj_2d_gt[0,7], proj_2d_gt[1,7]],[proj_2d_gt[0,6], proj_2d_gt[1,6]],[proj_2d_gt[0,2], proj_2d_gt[1,2]]], np.int32)
		cv2.polylines(image,[pts],True,(255,0,255))

		# Draw upper base of 3d bb
		pts = np.array([[proj_2d_p[0,4], proj_2d_p[1,4]],[proj_2d_p[0,6], proj_2d_p[1,6]],[proj_2d_p[0,7], proj_2d_p[1,7]],[proj_2d_p[0,5], proj_2d_p[1,5]]], np.int32)
		cv2.polylines(image,[pts],True,(0,255,255))
		pts = np.array([[proj_2d_gt[0,4], proj_2d_gt[1,4]],[proj_2d_gt[0,6], proj_2d_gt[1,6]],[proj_2d_gt[0,7], proj_2d_gt[1,7]],[proj_2d_gt[0,5], proj_2d_gt[1,5]]], np.int32)
		cv2.polylines(image,[pts],True,(255,0,255))

		# Save
		cv2.imwrite("result.png",image)
		

getBBOfPlyObject()
